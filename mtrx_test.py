from base_loader import BaseLoader
from utils.segmentation import Segmentation
import numpy as np
import cv2
import math
import matplotlib.pyplot as ptl


base = BaseLoader('CASIA-Iris-Lamp-100')
subject = base.subjects[0]
image_path = subject.left_image_paths[0]
segmentation = Segmentation(image_path=image_path)
segmentation.houghs_transform(min_ray = 30 , max_ray = 60)
#pupil_centroid = tuple([240 , 336])#segmentation.pupil_centroid
#pupil_ray = 47#segmentation.pupil_ray
pupil_centroid = segmentation.pupil_centroid
pupil_ray = segmentation.pupil_ray
print(pupil_ray)
rgb_image = cv2.imread(image_path)
image = cv2.imread(image_path , 0)
equalized_image = cv2.equalizeHist(segmentation.pre_processed_image)
seeds = []
for ray in range(pupil_ray + 10,pupil_ray + 100):
	values = []
	for teta in range(0,350 , 6):
		xt = int(pupil_centroid[0] - ray * math.cos(teta))       #getting x coordenate for the point generated by houghs_transform formula
		yt = int(pupil_centroid[1] - ray * math.sin(teta))     #getting y coordenate for the point generated by houghs_transform formula
		#cv2.circle(rgb_image , tuple([yt , xt]) , 1 , (0,0,255) , -1)
		values.append(equalized_image.item( xt, yt))
	seeds.append(values)

diferences = []
for seeds_index in xrange(1,len(seeds)):
	total = 0
	for index in xrange(0,len(seeds[seeds_index])):
		total += abs(seeds[seeds_index - 1][index] - seeds[seeds_index][index])
	diferences.append(total)

bigger = 0
bigger_index = 0
for index in xrange(0,len(diferences)):
	if diferences[index] > bigger:
		bigger = diferences[index]
		bigger_index = index
print(bigger_index)
cv2.circle(rgb_image , tuple([pupil_centroid[1] , pupil_centroid[0]]) , pupil_ray , (0,0,255))
cv2.circle(rgb_image , tuple([pupil_centroid[1] , pupil_centroid[0]]) , bigger_index + pupil_ray + 10, (255,0,0))
cv2.circle(rgb_image , tuple([pupil_centroid[1] , pupil_centroid[0]]) , pupil_ray + 100 , (0,255,0))
cv2.circle(equalized_image , tuple([pupil_centroid[1] , pupil_centroid[0]]) , pupil_ray , (0,0,255))
cv2.circle(equalized_image , tuple([pupil_centroid[1] , pupil_centroid[0]]) , bigger_index + pupil_ray + 10, (255,0,0))
cv2.circle(equalized_image , tuple([pupil_centroid[1] , pupil_centroid[0]]) , pupil_ray + 100 , (0,255,0))

pre_processed_image = segmentation.pre_processed_image
cv2.morphologyEx(pre_processed_image , cv2.MORPH_OPEN , np.ones((3 , 3) , np.uint8))


ptl.plot(diferences)
ptl.ylabel('index')
ptl.xlabel('values')
#ptl.show()
cv2.imshow('equalized' , equalized_image)
cv2.imshow('image' , rgb_image)
cv2.waitKey(0)